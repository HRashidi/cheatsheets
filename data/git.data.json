[
	{
		"_id" : 1,
		"title" : "Create Git",
		"cards" : [
			{
				"title" : "From existing directory",
				"commands" : [
					{
						"cmd": "cd project_dir"
					},
					{
						"cmd": "git init"
					},
					{
						"cmd": "git add ."
					}
				]
			},
			{
				"title" : "From other repository",
				"commands" : [
					{
						"cmd": "git clone existing_dir new_dir"
					},
					{
						"cmd": "git clone git://github.com/user/repo.git"
					},
					{
						"cmd": "git clone https://github.com/user/repo.git"
					}
				]
			}
		]
	},
	{
		"_id" : 2,
		"title" : "Local Changes",
		"cards" : [
			{
				"title" : "Changed in working directory",
				"commands" : [
					{
						"cmd": "git status"
					}
				]
			},
			{
				"title" : "Tracked file changes",
				"commands" : [
					{
						"cmd": "git diff"
					}
				]
			},
			{
				"title" : "Add changed files",
				"commands" : [
					{
						"cmd": "git add file1 file2 file3"
					}
				]
			},
			{
				"title" : "Remove file",
				"commands" : [
					{
						"cmd": "git rm file"
					},
					{
						"cmd": "git rm dir/ -r",
						"tip": "(recursive under directory)"
					}
				]
			},
			{
				"title" : "See files ready for commit",
				"commands" : [
					{
						"cmd": "git diff --cached"
					}
				]
			},
			{
				"title" : "Commit changes",
				"commands" : [
					{
						"cmd": "git commit"
					},
					{
						"cmd": "git commit -m 'My message'"
					},
					{
						"cmd": "git commit -a -m 'My message'",
						"tip": "(tracked files only, auto add)"
					}
				]
			},
			{
				"title" : "Change last commit",
				"commands" : [
					{
						"cmd": "git commit --amend"
					}
				]
			},
			{
				"title" : "Revert changes to file",
				"commands" : [
					{
						"cmd": "git checkout -- file"
					}
				]
			},
			{
				"title" : "Revert changes (new commit)",
				"commands" : [
					{
						"cmd": "git revert HEAD"
					}
				]
			},
			{
				"title" : "Return to last committed state",
				"commands" : [
					{
						"cmd": "git reset --hard HEAD"
					}
				]
			}
		]
	},
	{
		"_id" : 3,
		"title" : "History",
		"cards" : [
			{
				"title" : "Show all commits",
				"commands" : [
					{
						"cmd": "git log"
					}
				]
			},
			{
				"title" : "Short Format",
				"commands" : [
					{
						"cmd": "git log --pretty=-short"
					}
				]
			},
			{
				"title" : "Abort rebase",
				"commands" : [
					{
						"cmd": "git rebase --abort"
					}
				]
			},
			{
				"title" : "Patches",
				"commands" : [
					{
						"cmd": "git log -p"
					}
				]
			},
			{
				"title" : "Show file commits",
				"commands" : [
					{
						"cmd": "git log file"
					}
				]
			},
			{
				"title" : "Show directory commits",
				"commands" : [
					{
						"cmd": "git log dir/"
					}
				]
			},
			{
				"title" : "Stats",
				"commands" : [
					{
						"cmd": "git log --stat"
					}
				]
			},
			{
				"title" : "Who changed file",
				"commands" : [
					{
						"cmd": "git blame file"
					}
				]
			}
		]
	},
	{
		"_id" : 4,
		"title" : "Merge / Rebase",
		"cards" : [
			{
				"title" : "Merge branch into current",
				"commands" : [
					{
						"cmd": "git merge branch"
					}
				]
			},
			{
				"title" : "Rebase into branch",
				"commands" : [
					{
						"cmd": "git rebase branch"
					},
					{
						"cmd": "git rebase master branch"
					}
				]
			},
			{
				"title" : "Abort rebase",
				"commands" : [
					{
						"cmd": "git rebase --abort"
					}
				]
			},
			{
				"title" : "Merge tool to solve conflicts",
				"commands" : [
					{
						"cmd": "git mergetool"
					}
				]
			},
			{
				"title" : "To view the merge conflicts",
				"commands" : [
					{
						"cmd": "git diff",
						"tip": "complete conflict diff"
					},
					{
						"cmd": "git diff --base $file",
						"tip": "against base file"
					},
					{
						"cmd": "git diff --ours $file",
						"tip": "against your changes"
					},
					{
						"cmd": "git diff --theirs $file",
						"tip": "against other changes"
					}
				]
			},
			{
				"title" : "To discard conflicting patch",
				"commands" : [
					{
						"cmd": "git reset --hard"
					},
					{
						"cmd": "git rebase --skip"
					}
				]
			},
			{
				"title" : "After resolving conflicts",
				"commands" : [
					{
						"cmd": "git add $conflicting_file",
						"tip": "do for all resolved files"
					},
					{
						"cmd": "git rebase --continue"
					}
				]
			}
		]
	},
	{
		"_id" : 5,
		"title" : "Remote Update / Publish",
		"cards" : [
			{
				"title" : "List remotes",
				"commands" : [
					{
						"cmd": "git remote -v"
					}
				]
			},
			{
				"title" : "Show information",
				"commands" : [
					{
						"cmd": "git remote show remote"
					}
				]
			},
			{
				"title" : "Add remote",
				"commands" : [
					{
						"cmd": "git remote add path/url"
					}
				]
			},
			{
				"title" : "Fetch changes",
				"commands" : [
					{
						"cmd": "git fetch remote"
					}
				]
			},
			{
				"title" : "Fetch + merge",
				"commands" : [
					{
						"cmd": "git pull remote branch"
					}
				]
			},
			{
				"title" : "Publish local to remote",
				"commands" : [
					{
						"cmd": "git push remote branch"
					}
				]
			},
			{
				"title" : "Delete remote branch",
				"commands" : [
					{
						"cmd": "git push remote :branch"
					}
				]
			},
			{
				"title" : "Publish tags",
				"commands" : [
					{
						"cmd": "git push origin/upstream --tags"
					}
				]
			}
		]
	},
	{
		"_id" : 6,
		"title" : "Branching / Tagging",
		"cards" : [
			{
				"title" : "List branches",
				"commands" : [
					{
						"cmd": "git branch"
					}
				]
			},
			{
				"title" : "Switch to branch",
				"commands" : [
					{
						"cmd": "git checkout branch"
					}
				]
			},
			{
				"title" : "Create new branch",
				"commands" : [
					{
						"cmd": "git branch new"
					}
				]
			},
			{
				"title" : "Create branch from existing",
				"commands" : [
					{
						"cmd": "git branch new existing"
					}
				]
			},
			{
				"title" : "Delete branch",
				"commands" : [
					{
						"cmd": "git branch -d branch"
					}
				]
			},
			{
				"title" : "Tag current commit",
				"commands" : [
					{
						"cmd": "git tag tagname"
					}
				]
			}
		]
	},
	{
		"_id" : 7,
		"title" : "Useful Commands",
		"cards" : [
			{
				"title" : "Finding Regressions",
				"commands" : [
					{
						"cmd": "git bisect start",
						"tip": "to start"
					},
					{
						"cmd": "git bisect good $id",
						"tip": "$id is the last working version"
					},
					{
						"cmd": "git bisect bad $id",
						"tip": "$id is a broken version"
					},
					{
						"cmd": "git bisect bad/good",
						"tip": "to mark it as bad or good"
					},
					{
						"cmd": "git bisect visualize",
						"tip": "to launch gitk and mark it"
					},
					{
						"cmd": "git bisect reset",
						"tip": "once you're done"
					}
				]
			},
			{
				"title" : "Check for Errors and Cleanup Repository",
				"commands" : [
					{
						"cmd": "git fsck"
					},
					{
						"cmd": "git gc --prune"
					}
				]
			},
			{
				"title" : "Search Working Directory for foo()",
				"commands" : [
					{
						"cmd": "git grep 'foo()"
					}
				]
			}
		]
	}
]